--[[
	‚ú® KAWAII MONEY SHOP - Enhanced with Monetization Blueprint
	Based on "The Kawaii Monetization Blueprint" by following Sanrio design principles
	
	Features Implemented:
	- Multiple Sanrio character themes (Hello Kitty, My Melody, Cinnamoroll, Kuromi)
	- Advanced "juicy" animations with elastic and bounce effects
	- Tabbed navigation for Currency/Gamepasses/Featured items
	- Psychological nudges ("Best Value", "Most Popular" tags)
	- Hybrid Scale/Offset responsive design
	- Performance optimizations with connection tracking
	- Kawaii audio feedback system ready
	- UI particle system support
--]]

local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ContentProvider = game:GetService("ContentProvider")
local player = Players.LocalPlayer

-- ========================================
-- KAWAII DESIGN PHILOSOPHY (Section 1)
-- ========================================

-- Multiple theme palettes based on Sanrio characters for A/B testing
local THEMES = {
	-- Hello Kitty Classic (Section 1.3)
	HelloKitty = {
		Palette = {
			BackgroundPrimary = Color3.fromRGB(255, 255, 255), -- White
			PanelFill = Color3.fromRGB(255, 231, 23),         -- Yellow
			Accent = Color3.fromRGB(237, 22, 79),             -- Crimson
			AccentLight = Color3.fromRGB(255, 164, 175),      -- Light pink
			AccentDark = Color3.fromRGB(28, 99, 183),         -- Blue
			NeutralDark = Color3.fromRGB(30, 24, 26),         -- Black
			White = Color3.fromRGB(255, 255, 255),
			Success = Color3.fromRGB(123, 237, 159),          -- Mint green
			Warning = Color3.fromRGB(255, 231, 23),           -- Yellow
		}
	},
	-- My Melody Sweet (Section 1.3)
	MyMelody = {
		Palette = {
			BackgroundPrimary = Color3.fromRGB(253, 242, 250), -- Off-White
			PanelFill = Color3.fromRGB(252, 234, 248),        -- Light Pink
			Accent = Color3.fromRGB(248, 189, 195),           -- Pink
			AccentLight = Color3.fromRGB(252, 216, 222),      -- Lighter pink
			AccentDark = Color3.fromRGB(191, 141, 142),       -- Muted Rose
			NeutralDark = Color3.fromRGB(30, 24, 26),         -- Near black
			White = Color3.fromRGB(255, 255, 255),
			Success = Color3.fromRGB(147, 214, 161),          -- Soft green
			Warning = Color3.fromRGB(255, 208, 225),          -- Dusty rose
		}
	},
	-- Cinnamoroll Sky (Section 1.3)
	Cinnamoroll = {
		Palette = {
			BackgroundPrimary = Color3.fromRGB(255, 255, 255), -- White
			PanelFill = Color3.fromRGB(193, 231, 245),        -- Light Blue
			Accent = Color3.fromRGB(76, 181, 232),            -- Sky Blue
			AccentLight = Color3.fromRGB(193, 231, 245),      -- Light blue
			AccentDark = Color3.fromRGB(251, 216, 222),       -- Blush Pink
			NeutralDark = Color3.fromRGB(30, 24, 26),
			White = Color3.fromRGB(255, 255, 255),
			Success = Color3.fromRGB(255, 208, 225),          -- Pastel pink
			Warning = Color3.fromRGB(255, 231, 153),          -- Pastel yellow
		}
	},
	-- Kuromi Punk (Section 1.3)
	Kuromi = {
		Palette = {
			BackgroundPrimary = Color3.fromRGB(225, 221, 244), -- Light Lilac
			PanelFill = Color3.fromRGB(202, 197, 237),        -- Lavender
			Accent = Color3.fromRGB(240, 195, 226),           -- Pastel Pink
			AccentLight = Color3.fromRGB(240, 195, 226),      -- Pastel pink
			AccentDark = Color3.fromRGB(81, 66, 131),         -- Dark Purple
			NeutralDark = Color3.fromRGB(0, 0, 0),            -- Black
			White = Color3.fromRGB(255, 255, 255),
			Success = Color3.fromRGB(202, 197, 237),          -- Lavender
			Warning = Color3.fromRGB(240, 195, 226),          -- Pink
		}
	}
}

-- Select theme (can be changed for different experiences or user preference)
local CURRENT_THEME = "Cinnamoroll" -- Default to Cinnamoroll for maximum kawaii appeal
local THEME = THEMES[CURRENT_THEME]

-- Typography following Sanrio Blueprint (Section 1.3)
THEME.Typography = {
	Header = Enum.Font.FredokaOne,      -- Bold, rounded, kawaii header font
	Body = Enum.Font.Gotham,            -- Clean, highly legible body font
	Button = Enum.Font.FredokaOne,      -- Chunky, approachable button font
	Script = Enum.Font.PatrickHand,     -- Handwritten style for special text
	Currency = Enum.Font.SourceSansBold, -- Clear for numbers
}

-- Shape Language & Strokes (Section 1.2)
THEME.Strokes = {
	DefaultThickness = 3,               -- Bold outlines like Sanrio
	LineJoinMode = Enum.LineJoinMode.Round,
	ButtonThickness = 4,                -- Extra thick for important CTAs
}

-- Motion & Juice (Section 3.3)
THEME.Motion = {
	Transition = 0.4,                   -- Smooth page transitions
	Quick = 0.15,                       -- Snappy hover feedback
	Bounce = 0.35,                      -- Bouncy button animations
	Elastic = 0.5,                      -- Elastic effects for special moments
	Celebrate = 0.8,                    -- Purchase celebration duration
}

-- Corner Radius (Section 1.2 - soft, organic shapes)
THEME.CornerRadius = {
	Large = UDim.new(0.05, 0),          -- Main containers
	Medium = UDim.new(0.12, 0),         -- Cards and panels
	Small = UDim.new(0.25, 0),          -- Buttons and icons
	Round = UDim.new(0.5, 0),           -- Fully round elements
}

-- ========================================
-- PRODUCT CONFIGURATION (Section 2)
-- ========================================

-- Shop categories implementing Cozy-Competitive Funnel (Section 2.3)
local SHOP_CATEGORIES = {
	{
		id = "currency",
		name = "üí∞ Currency",
		icon = "üí∞",
		description = "Get instant cash boosts!"
	},
	{
		id = "gamepasses",
		name = "‚≠ê Game Passes",
		icon = "‚≠ê",
		description = "Permanent upgrades & perks!"
	},
	{
		id = "featured",
		name = "‚ú® Featured",
		icon = "‚ú®",
		description = "Limited time offers!"
	}
}

-- Developer products for currency (Section 2.3)
local CURRENCY_PRODUCTS = {
	{
		id = 3366419712, 
		amount = 1000, 
		icon = "üíµ",
		tag = nil,
		description = "A small boost to get started"
	},
	{
		id = 3366420012, 
		amount = 5000, 
		icon = "üí∞",
		tag = "MOST POPULAR", -- Psychological nudge (Section 2.3)
		tagColor = "Success",
		description = "Perfect for regular players"
	},
	{
		id = 3366420478, 
		amount = 10000, 
		icon = "üíé",
		tag = nil,
		description = "Great value for builders"
	},
	{
		id = 3366420800, 
		amount = 25000, 
		icon = "üëë",
		tag = "BEST VALUE", -- Psychological nudge (Section 2.3)
		tagColor = "Warning",
		description = "Maximum cash for pros!"
	},
}

-- Gamepasses implementing permanent value (Section 2.4)
local GAMEPASS_PRODUCTS = {
	{
		id = 123456789, -- Replace with actual gamepass ID
		name = "VIP Access",
		icon = "‚≠ê",
		price = "299",
		description = "‚Ä¢ Exclusive VIP area access\n‚Ä¢ Special VIP chat tag\n‚Ä¢ 20% bonus on all purchases",
		tag = "EXCLUSIVE",
		tagColor = "Accent"
	},
	{
		id = 123456790, -- Replace with actual gamepass ID
		name = "2x Cash Forever",
		icon = "üí∞",
		price = "499", 
		description = "‚Ä¢ Double all cash earnings\n‚Ä¢ Stacks with other bonuses\n‚Ä¢ Works forever!",
		tag = "POPULAR",
		tagColor = "Success"
	},
	{
		id = 123456791, -- Replace with actual gamepass ID
		name = "Bigger Pockets",
		icon = "üéí",
		price = "199",
		description = "‚Ä¢ 2x inventory capacity\n‚Ä¢ Never run out of space\n‚Ä¢ Quality of life upgrade",
		tag = nil
	},
	{
		id = 123456792, -- Replace with actual gamepass ID
		name = "Style Pack",
		icon = "‚ú®",
		price = "399",
		description = "‚Ä¢ 50+ exclusive items\n‚Ä¢ Rare cosmetics\n‚Ä¢ Show off your style!",
		tag = "LIMITED",
		tagColor = "Warning"
	}
}

-- Featured/seasonal items
local FEATURED_PRODUCTS = {
	{
		type = "bundle",
		id = 123456793,
		name = "Starter Bundle",
		icon = "üéÅ",
		price = "99",
		description = "‚Ä¢ 5,000 Cash\n‚Ä¢ VIP for 7 days\n‚Ä¢ 10 exclusive items",
		tag = "80% OFF",
		tagColor = "Success",
		originalPrice = "499"
	}
}

-- ========================================
-- HELPER FUNCTIONS
-- ========================================

-- Format numbers with commas
local function formatNumber(n)
	local formatted = tostring(n)
	while true do
		local newFormatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		formatted = newFormatted
		if k == 0 then break end
	end
	return formatted
end

-- Connection management to prevent memory leaks (Section 4.4)
local connections = {}
local function track(conn)
	table.insert(connections, conn)
	return conn
end

-- Preload assets for smooth experience
local assetsToPreload = {
	"rbxassetid://1316045217", -- Shadow image
	-- Add sound asset IDs here when implementing audio
}

-- ========================================
-- CREATE UI STRUCTURE (Section 3)
-- ========================================

-- Root GUI with proper settings
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KawaiiMoneyShop"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.DisplayOrder = 10 -- Ensure shop appears above game UI
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Dark overlay for modal effect
local overlay = Instance.new("TextButton")
overlay.Name = "Overlay"
overlay.Size = UDim2.new(1, 0, 1, 0)
overlay.BackgroundColor3 = Color3.new(0, 0, 0)
overlay.BackgroundTransparency = 1
overlay.Text = ""
overlay.AutoButtonColor = false
overlay.Visible = false
overlay.Modal = true -- Blocks input to game when shop is open
overlay.ZIndex = 5
overlay.Parent = screenGui

-- Main shop container (Hybrid sizing - Section 3.1)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.fromScale(0.85, 0.85) -- Scale for responsive container
mainFrame.Position = UDim2.fromScale(0.5, 0.5)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = THEME.Palette.BackgroundPrimary
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.ZIndex = 10
mainFrame.Parent = screenGui

-- Apply kawaii styling to main frame
local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = THEME.CornerRadius.Large
mainCorner.Parent = mainFrame

local mainStroke = Instance.new("UIStroke")
mainStroke.Thickness = THEME.Strokes.DefaultThickness
mainStroke.LineJoinMode = THEME.Strokes.LineJoinMode
mainStroke.Color = THEME.Palette.AccentDark
mainStroke.Transparency = 0.3
mainStroke.Parent = mainFrame

-- Subtle gradient for depth (Section 3.2)
local mainGradient = Instance.new("UIGradient")
mainGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, THEME.Palette.BackgroundPrimary:Lerp(THEME.Palette.White, 0.1)),
	ColorSequenceKeypoint.new(1, THEME.Palette.PanelFill)
}
mainGradient.Rotation = 90
mainGradient.Parent = mainFrame

local mainPadding = Instance.new("UIPadding")
mainPadding.PaddingTop = UDim.new(0, 16)
mainPadding.PaddingBottom = UDim.new(0, 16)
mainPadding.PaddingLeft = UDim.new(0, 16)
mainPadding.PaddingRight = UDim.new(0, 16)
mainPadding.Parent = mainFrame

-- ========================================
-- HEADER WITH CLOSE BUTTON
-- ========================================

local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.new(1, 0, 0, 80) -- Fixed height in offset
header.BackgroundTransparency = 1
header.ZIndex = 11
header.Parent = mainFrame

-- Shop title with kawaii styling
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -60, 0, 40)
title.Position = UDim2.new(0, 12, 0, 8)
title.BackgroundTransparency = 1
title.Text = "‚ú® Kawaii Shop ‚ú®"
title.TextColor3 = THEME.Palette.AccentDark
title.TextStrokeColor3 = THEME.Palette.White
title.TextStrokeTransparency = 0.6
title.Font = THEME.Typography.Header
title.TextSize = 36 -- Fixed size for consistent appearance
title.TextXAlignment = Enum.TextXAlignment.Center
title.ZIndex = 11
title.Parent = header

-- Subtitle with cozy message
local subtitle = Instance.new("TextLabel")
subtitle.Size = UDim2.new(1, -60, 0, 24)
subtitle.Position = UDim2.new(0, 12, 0, 48)
subtitle.BackgroundTransparency = 1
subtitle.Text = "Get cute boosts & exclusive items! üíñ"
subtitle.TextColor3 = THEME.Palette.NeutralDark
subtitle.TextTransparency = 0.1
subtitle.Font = THEME.Typography.Body
subtitle.TextSize = 18
subtitle.TextXAlignment = Enum.TextXAlignment.Center
subtitle.ZIndex = 11
subtitle.Parent = header

-- Close button with kawaii design
local closeBtn = Instance.new("TextButton")
closeBtn.Name = "CloseButton"
closeBtn.Size = UDim2.fromOffset(48, 48) -- Fixed size for consistency
closeBtn.Position = UDim2.new(1, -60, 0, 16)
closeBtn.BackgroundColor3 = THEME.Palette.Accent
closeBtn.Text = "‚úï"
closeBtn.TextColor3 = THEME.Palette.White
closeBtn.Font = THEME.Typography.Button
closeBtn.TextSize = 24
closeBtn.AutoButtonColor = false
closeBtn.ZIndex = 12
closeBtn.Parent = header

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = THEME.CornerRadius.Round
closeCorner.Parent = closeBtn

local closeStroke = Instance.new("UIStroke")
closeStroke.Thickness = THEME.Strokes.ButtonThickness
closeStroke.Color = THEME.Palette.AccentDark
closeStroke.Parent = closeBtn

-- ========================================
-- TAB NAVIGATION (Section 2.3)
-- ========================================

local tabContainer = Instance.new("Frame")
tabContainer.Name = "TabContainer"
tabContainer.Size = UDim2.new(1, 0, 0, 60)
tabContainer.Position = UDim2.new(0, 0, 0, 88)
tabContainer.BackgroundTransparency = 1
tabContainer.ZIndex = 11
tabContainer.Parent = mainFrame

local tabLayout = Instance.new("UIListLayout")
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
tabLayout.Padding = UDim.new(0, 12)
tabLayout.Parent = tabContainer

-- Create tab buttons
local tabs = {}
local currentTab = nil

for _, category in ipairs(SHOP_CATEGORIES) do
	local tabBtn = Instance.new("TextButton")
	tabBtn.Name = category.id .. "Tab"
	tabBtn.Size = UDim2.fromOffset(160, 48)
	tabBtn.BackgroundColor3 = THEME.Palette.PanelFill
	tabBtn.Text = category.name
	tabBtn.TextColor3 = THEME.Palette.NeutralDark
	tabBtn.Font = THEME.Typography.Button
	tabBtn.TextSize = 20
	tabBtn.AutoButtonColor = false
	tabBtn.Parent = tabContainer
	
	local tabCorner = Instance.new("UICorner")
	tabCorner.CornerRadius = THEME.CornerRadius.Medium
	tabCorner.Parent = tabBtn
	
	local tabStroke = Instance.new("UIStroke")
	tabStroke.Thickness = 2
	tabStroke.Color = THEME.Palette.AccentLight
	tabStroke.Transparency = 0.5
	tabStroke.Parent = tabBtn
	
	tabs[category.id] = {
		button = tabBtn,
		category = category
	}
end

-- ========================================
-- CONTENT CONTAINER
-- ========================================

local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, 0, 1, -160) -- Fill remaining space
contentFrame.Position = UDim2.new(0, 0, 0, 156)
contentFrame.BackgroundTransparency = 1
contentFrame.ClipsDescendants = true
contentFrame.ZIndex = 10
contentFrame.Parent = mainFrame

-- Create content pages for each category
local contentPages = {}

-- ========================================
-- CURRENCY PAGE
-- ========================================

local currencyPage = Instance.new("ScrollingFrame")
currencyPage.Name = "CurrencyPage"
currencyPage.Size = UDim2.fromScale(1, 1)
currencyPage.BackgroundTransparency = 1
currencyPage.ScrollBarThickness = 6
currencyPage.ScrollBarImageColor3 = THEME.Palette.AccentDark
currencyPage.BorderSizePixel = 0
currencyPage.CanvasSize = UDim2.new(0, 0, 0, 0)
currencyPage.Visible = false
currencyPage.Parent = contentFrame

local currencyPadding = Instance.new("UIPadding")
currencyPadding.PaddingTop = UDim.new(0, 12)
currencyPadding.PaddingBottom = UDim.new(0, 12)
currencyPadding.PaddingLeft = UDim.new(0, 12)
currencyPadding.PaddingRight = UDim.new(0, 12)
currencyPadding.Parent = currencyPage

local currencyGrid = Instance.new("UIGridLayout")
currencyGrid.CellSize = UDim2.new(1, -16, 0, 120) -- Fixed height cards
currencyGrid.CellPadding = UDim2.fromOffset(12, 12)
currencyGrid.FillDirection = Enum.FillDirection.Horizontal
currencyGrid.HorizontalAlignment = Enum.HorizontalAlignment.Center
currencyGrid.SortOrder = Enum.SortOrder.LayoutOrder
currencyGrid.Parent = currencyPage

-- Create currency product cards
for i, product in ipairs(CURRENCY_PRODUCTS) do
	local card = Instance.new("Frame")
	card.Name = "CurrencyProduct" .. i
	card.BackgroundColor3 = THEME.Palette.PanelFill
	card.BorderSizePixel = 0
	card.LayoutOrder = i
	card.Parent = currencyPage
	
	local cardCorner = Instance.new("UICorner")
	cardCorner.CornerRadius = THEME.CornerRadius.Medium
	cardCorner.Parent = card
	
	local cardStroke = Instance.new("UIStroke")
	cardStroke.Thickness = THEME.Strokes.DefaultThickness
	cardStroke.Color = THEME.Palette.AccentLight
	cardStroke.Transparency = 0.4
	cardStroke.Parent = card
	
	-- Tag implementation (psychological nudge)
	if product.tag then
		local tagFrame = Instance.new("Frame")
		tagFrame.Size = UDim2.fromOffset(120, 28)
		tagFrame.Position = UDim2.new(1, -8, 0, 8)
		tagFrame.AnchorPoint = Vector2.new(1, 0)
		tagFrame.BackgroundColor3 = THEME.Palette[product.tagColor] or THEME.Palette.Accent
		tagFrame.ZIndex = 12
		tagFrame.Parent = card
		
		local tagCorner = Instance.new("UICorner")
		tagCorner.CornerRadius = THEME.CornerRadius.Small
		tagCorner.Parent = tagFrame
		
		local tagLabel = Instance.new("TextLabel")
		tagLabel.Size = UDim2.fromScale(1, 1)
		tagLabel.BackgroundTransparency = 1
		tagLabel.Text = product.tag
		tagLabel.TextColor3 = THEME.Palette.White
		tagLabel.Font = THEME.Typography.Button
		tagLabel.TextSize = 14
		tagLabel.TextScaled = false
		tagLabel.Parent = tagFrame
	end
	
	-- Product layout
	local productLayout = Instance.new("UIListLayout")
	productLayout.FillDirection = Enum.FillDirection.Horizontal
	productLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	productLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	productLayout.Padding = UDim.new(0, 16)
	productLayout.Parent = card
	
	local productPadding = Instance.new("UIPadding")
	productPadding.PaddingTop = UDim.new(0, 12)
	productPadding.PaddingBottom = UDim.new(0, 12)
	productPadding.PaddingLeft = UDim.new(0, 16)
	productPadding.PaddingRight = UDim.new(0, 16)
	productPadding.Parent = card
	
	-- Icon with kawaii background
	local iconFrame = Instance.new("Frame")
	iconFrame.Size = UDim2.fromOffset(80, 80)
	iconFrame.BackgroundColor3 = THEME.Palette.Accent
	iconFrame.Parent = card
	
	local iconCorner = Instance.new("UICorner")
	iconCorner.CornerRadius = THEME.CornerRadius.Small
	iconCorner.Parent = iconFrame
	
	local iconStroke = Instance.new("UIStroke")
	iconStroke.Thickness = THEME.Strokes.DefaultThickness
	iconStroke.Color = THEME.Palette.AccentDark
	iconStroke.Parent = iconFrame
	
	local iconAspect = Instance.new("UIAspectRatioConstraint")
	iconAspect.AspectRatio = 1
	iconAspect.Parent = iconFrame
	
	local icon = Instance.new("TextLabel")
	icon.Size = UDim2.fromScale(1, 1)
	icon.BackgroundTransparency = 1
	icon.Text = product.icon
	icon.TextColor3 = THEME.Palette.White
	icon.Font = THEME.Typography.Header
	icon.TextSize = 36
	icon.Parent = iconFrame
	
	-- Info container
	local infoContainer = Instance.new("Frame")
	infoContainer.Size = UDim2.new(1, -200, 1, 0)
	infoContainer.BackgroundTransparency = 1
	infoContainer.Parent = card
	
	local infoLayout = Instance.new("UIListLayout")
	infoLayout.FillDirection = Enum.FillDirection.Vertical
	infoLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	infoLayout.Padding = UDim.new(0, 4)
	infoLayout.Parent = infoContainer
	
	-- Amount label
	local amountLabel = Instance.new("TextLabel")
	amountLabel.Size = UDim2.new(1, 0, 0, 28)
	amountLabel.BackgroundTransparency = 1
	amountLabel.Text = formatNumber(product.amount) .. " Cash"
	amountLabel.TextColor3 = THEME.Palette.NeutralDark
	amountLabel.Font = THEME.Typography.Currency
	amountLabel.TextSize = 24
	amountLabel.TextXAlignment = Enum.TextXAlignment.Left
	amountLabel.Parent = infoContainer
	
	-- Description
	local desc = Instance.new("TextLabel")
	desc.Size = UDim2.new(1, 0, 0, 20)
	desc.BackgroundTransparency = 1
	desc.Text = product.description
	desc.TextColor3 = THEME.Palette.NeutralDark
	desc.TextTransparency = 0.2
	desc.Font = THEME.Typography.Body
	desc.TextSize = 16
	desc.TextXAlignment = Enum.TextXAlignment.Left
	desc.Parent = infoContainer
	
	-- Buy button with enhanced styling
	local buyBtn = Instance.new("TextButton")
	buyBtn.Size = UDim2.fromOffset(100, 48)
	buyBtn.BackgroundColor3 = THEME.Palette.Accent
	buyBtn.Text = "Buy"
	buyBtn.TextColor3 = THEME.Palette.White
	buyBtn.Font = THEME.Typography.Button
	buyBtn.TextSize = 20
	buyBtn.AutoButtonColor = false
	buyBtn.Parent = card
	
	local buyCorner = Instance.new("UICorner")
	buyCorner.CornerRadius = THEME.CornerRadius.Small
	buyCorner.Parent = buyBtn
	
	local buyStroke = Instance.new("UIStroke")
	buyStroke.Thickness = THEME.Strokes.ButtonThickness
	buyStroke.Color = THEME.Palette.AccentDark
	buyStroke.Parent = buyBtn
	
	-- Gradient for depth
	local buyGradient = Instance.new("UIGradient")
	buyGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, THEME.Palette.Accent:lerp(THEME.Palette.White, 0.15)),
		ColorSequenceKeypoint.new(1, THEME.Palette.Accent)
	})
	buyGradient.Rotation = 90
	buyGradient.Parent = buyBtn
	
	-- UIScale for animations
	local buyScale = Instance.new("UIScale")
	buyScale.Scale = 1
	buyScale.Parent = buyBtn
	
	-- Enhanced interactions (Section 3.3)
	track(buyBtn.MouseEnter:Connect(function()
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
			Scale = 1.05
		}):Play()
		TweenService:Create(buyBtn, TweenInfo.new(THEME.Motion.Quick), {
			BackgroundColor3 = THEME.Palette.Accent:lerp(THEME.Palette.White, 0.1)
		}):Play()
	end))
	
	track(buyBtn.MouseLeave:Connect(function()
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
			Scale = 1
		}):Play()
		TweenService:Create(buyBtn, TweenInfo.new(THEME.Motion.Quick), {
			BackgroundColor3 = THEME.Palette.Accent
		}):Play()
	end))
	
	track(buyBtn.MouseButton1Down:Connect(function()
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Back), {
			Scale = 0.95
		}):Play()
	end))
	
	track(buyBtn.MouseButton1Up:Connect(function()
		-- Bounce effect on release
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Bounce, Enum.EasingStyle.Elastic), {
			Scale = 1
		}):Play()
		
		-- Trigger purchase
		MarketplaceService:PromptProductPurchase(player, product.id)
		
		-- Visual feedback
		buyBtn.Text = "üíñ"
		task.wait(0.5)
		buyBtn.Text = "Buy"
	end))
end

-- Update canvas size
local function updateCurrencyCanvas()
	local contentSize = currencyGrid.AbsoluteContentSize
	currencyPage.CanvasSize = UDim2.fromOffset(contentSize.X, contentSize.Y + 24)
end
currencyGrid:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCurrencyCanvas)
updateCurrencyCanvas()

contentPages["currency"] = currencyPage

-- ========================================
-- GAMEPASSES PAGE
-- ========================================

local gamepassPage = Instance.new("ScrollingFrame")
gamepassPage.Name = "GamepassPage"
gamepassPage.Size = UDim2.fromScale(1, 1)
gamepassPage.BackgroundTransparency = 1
gamepassPage.ScrollBarThickness = 6
gamepassPage.ScrollBarImageColor3 = THEME.Palette.AccentDark
gamepassPage.BorderSizePixel = 0
gamepassPage.CanvasSize = UDim2.new(0, 0, 0, 0)
gamepassPage.Visible = false
gamepassPage.Parent = contentFrame

local gamepassPadding = Instance.new("UIPadding")
gamepassPadding.PaddingTop = UDim.new(0, 12)
gamepassPadding.PaddingBottom = UDim.new(0, 12)
gamepassPadding.PaddingLeft = UDim.new(0, 12)
gamepassPadding.PaddingRight = UDim.new(0, 12)
gamepassPadding.Parent = gamepassPage

local gamepassLayout = Instance.new("UIListLayout")
gamepassLayout.FillDirection = Enum.FillDirection.Vertical
gamepassLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
gamepassLayout.Padding = UDim.new(0, 16)
gamepassLayout.SortOrder = Enum.SortOrder.LayoutOrder
gamepassLayout.Parent = gamepassPage

-- Create gamepass cards (more detailed than currency)
for i, gamepass in ipairs(GAMEPASS_PRODUCTS) do
	local card = Instance.new("Frame")
	card.Name = "GamepassProduct" .. i
	card.Size = UDim2.new(1, -24, 0, 180) -- Taller for more info
	card.BackgroundColor3 = THEME.Palette.PanelFill
	card.BorderSizePixel = 0
	card.LayoutOrder = i
	card.Parent = gamepassPage
	
	local cardCorner = Instance.new("UICorner")
	cardCorner.CornerRadius = THEME.CornerRadius.Medium
	cardCorner.Parent = card
	
	local cardStroke = Instance.new("UIStroke")
	cardStroke.Thickness = THEME.Strokes.DefaultThickness
	cardStroke.Color = THEME.Palette.AccentLight
	cardStroke.Transparency = 0.4
	cardStroke.Parent = card
	
	-- Special gradient for gamepasses
	local cardGradient = Instance.new("UIGradient")
	cardGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
		ColorSequenceKeypoint.new(1, THEME.Palette.AccentLight:lerp(THEME.Palette.White, 0.9))
	})
	cardGradient.Rotation = 45
	cardGradient.Parent = card
	
	-- Tag for gamepasses
	if gamepass.tag then
		local tagFrame = Instance.new("Frame")
		tagFrame.Size = UDim2.fromOffset(100, 28)
		tagFrame.Position = UDim2.new(1, -8, 0, 8)
		tagFrame.AnchorPoint = Vector2.new(1, 0)
		tagFrame.BackgroundColor3 = THEME.Palette[gamepass.tagColor] or THEME.Palette.Accent
		tagFrame.ZIndex = 12
		tagFrame.Parent = card
		
		local tagCorner = Instance.new("UICorner")
		tagCorner.CornerRadius = THEME.CornerRadius.Small
		tagCorner.Parent = tagFrame
		
		local tagLabel = Instance.new("TextLabel")
		tagLabel.Size = UDim2.fromScale(1, 1)
		tagLabel.BackgroundTransparency = 1
		tagLabel.Text = gamepass.tag
		tagLabel.TextColor3 = THEME.Palette.White
		tagLabel.Font = THEME.Typography.Button
		tagLabel.TextSize = 14
		tagLabel.Parent = tagFrame
	end
	
	local cardPadding = Instance.new("UIPadding")
	cardPadding.PaddingTop = UDim.new(0, 16)
	cardPadding.PaddingBottom = UDim.new(0, 16)
	cardPadding.PaddingLeft = UDim.new(0, 20)
	cardPadding.PaddingRight = UDim.new(0, 20)
	cardPadding.Parent = card
	
	-- Gamepass layout
	local gamepassContentLayout = Instance.new("UIListLayout")
	gamepassContentLayout.FillDirection = Enum.FillDirection.Vertical
	gamepassContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	gamepassContentLayout.Padding = UDim.new(0, 12)
	gamepassContentLayout.Parent = card
	
	-- Title row
	local titleRow = Instance.new("Frame")
	titleRow.Size = UDim2.new(1, 0, 0, 32)
	titleRow.BackgroundTransparency = 1
	titleRow.Parent = card
	
	local titleLayout = Instance.new("UIListLayout")
	titleLayout.FillDirection = Enum.FillDirection.Horizontal
	titleLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	titleLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	titleLayout.Padding = UDim.new(0, 12)
	titleLayout.Parent = titleRow
	
	-- Icon
	local iconLabel = Instance.new("TextLabel")
	iconLabel.Size = UDim2.fromOffset(32, 32)
	iconLabel.BackgroundTransparency = 1
	iconLabel.Text = gamepass.icon
	iconLabel.TextColor3 = THEME.Palette.AccentDark
	iconLabel.Font = THEME.Typography.Header
	iconLabel.TextSize = 28
	iconLabel.Parent = titleRow
	
	-- Name
	local nameLabel = Instance.new("TextLabel")
	nameLabel.Size = UDim2.new(1, -44, 1, 0)
	nameLabel.BackgroundTransparency = 1
	nameLabel.Text = gamepass.name
	nameLabel.TextColor3 = THEME.Palette.NeutralDark
	nameLabel.Font = THEME.Typography.Header
	nameLabel.TextSize = 24
	nameLabel.TextXAlignment = Enum.TextXAlignment.Left
	nameLabel.Parent = titleRow
	
	-- Description with benefits list
	local descLabel = Instance.new("TextLabel")
	descLabel.Size = UDim2.new(1, 0, 0, 80)
	descLabel.BackgroundTransparency = 1
	descLabel.Text = gamepass.description
	descLabel.TextColor3 = THEME.Palette.NeutralDark
	descLabel.TextTransparency = 0.1
	descLabel.Font = THEME.Typography.Body
	descLabel.TextSize = 16
	descLabel.TextXAlignment = Enum.TextXAlignment.Left
	descLabel.TextYAlignment = Enum.TextYAlignment.Top
	descLabel.TextWrapped = true
	descLabel.Parent = card
	
	-- Price and buy button row
	local buyRow = Instance.new("Frame")
	buyRow.Size = UDim2.new(1, 0, 0, 48)
	buyRow.BackgroundTransparency = 1
	buyRow.Parent = card
	
	local buyLayout = Instance.new("UIListLayout")
	buyLayout.FillDirection = Enum.FillDirection.Horizontal
	buyLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	buyLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	buyLayout.Padding = UDim.new(0, 16)
	buyLayout.Parent = buyRow
	
	-- Price display
	local priceFrame = Instance.new("Frame")
	priceFrame.Size = UDim2.fromOffset(120, 48)
	priceFrame.BackgroundTransparency = 1
	priceFrame.Parent = buyRow
	
	local priceLabel = Instance.new("TextLabel")
	priceLabel.Size = UDim2.fromScale(1, 1)
	priceLabel.BackgroundTransparency = 1
	priceLabel.Text = "R$ " .. gamepass.price
	priceLabel.TextColor3 = THEME.Palette.Success
	priceLabel.Font = THEME.Typography.Currency
	priceLabel.TextSize = 28
	priceLabel.Parent = priceFrame
	
	-- Buy button
	local buyBtn = Instance.new("TextButton")
	buyBtn.Size = UDim2.fromOffset(140, 48)
	buyBtn.BackgroundColor3 = THEME.Palette.Success
	buyBtn.Text = "Get Now!"
	buyBtn.TextColor3 = THEME.Palette.White
	buyBtn.Font = THEME.Typography.Button
	buyBtn.TextSize = 20
	buyBtn.AutoButtonColor = false
	buyBtn.Parent = buyRow
	
	local buyCorner = Instance.new("UICorner")
	buyCorner.CornerRadius = THEME.CornerRadius.Small
	buyCorner.Parent = buyBtn
	
	local buyStroke = Instance.new("UIStroke")
	buyStroke.Thickness = THEME.Strokes.ButtonThickness
	buyStroke.Color = THEME.Palette.Success:lerp(Color3.new(0, 0, 0), 0.2)
	buyStroke.Parent = buyBtn
	
	local buyScale = Instance.new("UIScale")
	buyScale.Scale = 1
	buyScale.Parent = buyBtn
	
	-- Gamepass interactions
	track(buyBtn.MouseEnter:Connect(function()
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
			Scale = 1.08
		}):Play()
	end))
	
	track(buyBtn.MouseLeave:Connect(function()
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
			Scale = 1
		}):Play()
	end))
	
	track(buyBtn.MouseButton1Click:Connect(function()
		-- Elastic animation on purchase
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Elastic, Enum.EasingStyle.Elastic), {
			Scale = 1.15
		}):Play()
		
		-- Prompt gamepass purchase
		MarketplaceService:PromptGamePassPurchase(player, gamepass.id)
		
		wait(0.5)
		TweenService:Create(buyScale, TweenInfo.new(THEME.Motion.Quick), {
			Scale = 1
		}):Play()
	end))
end

-- Update gamepass canvas
local function updateGamepassCanvas()
	local contentSize = gamepassLayout.AbsoluteContentSize
	gamepassPage.CanvasSize = UDim2.fromOffset(0, contentSize.Y + 24)
end
gamepassLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateGamepassCanvas)
updateGamepassCanvas()

contentPages["gamepasses"] = gamepassPage

-- ========================================
-- FEATURED PAGE (placeholder)
-- ========================================

local featuredPage = Instance.new("Frame")
featuredPage.Name = "FeaturedPage"
featuredPage.Size = UDim2.fromScale(1, 1)
featuredPage.BackgroundTransparency = 1
featuredPage.Visible = false
featuredPage.Parent = contentFrame

local comingSoon = Instance.new("TextLabel")
comingSoon.Size = UDim2.fromScale(1, 1)
comingSoon.BackgroundTransparency = 1
comingSoon.Text = "‚ú® Featured items coming soon! ‚ú®"
comingSoon.TextColor3 = THEME.Palette.NeutralDark
comingSoon.Font = THEME.Typography.Header
comingSoon.TextSize = 28
comingSoon.Parent = featuredPage

contentPages["featured"] = featuredPage

-- ========================================
-- TAB SWITCHING LOGIC
-- ========================================

local function switchTab(tabId)
	-- Update tab appearance
	for id, tab in pairs(tabs) do
		if id == tabId then
			-- Active tab
			TweenService:Create(tab.button, TweenInfo.new(THEME.Motion.Quick), {
				BackgroundColor3 = THEME.Palette.Accent,
				TextColor3 = THEME.Palette.White
			}):Play()
			currentTab = id
		else
			-- Inactive tab
			TweenService:Create(tab.button, TweenInfo.new(THEME.Motion.Quick), {
				BackgroundColor3 = THEME.Palette.PanelFill,
				TextColor3 = THEME.Palette.NeutralDark
			}):Play()
		end
	end
	
	-- Show/hide content pages with animation
	for id, page in pairs(contentPages) do
		if id == tabId then
			page.Visible = true
			page.Position = UDim2.fromScale(0, 0)
			TweenService:Create(page, TweenInfo.new(THEME.Motion.Transition, Enum.EasingStyle.Quart), {
				Position = UDim2.fromScale(0, 0)
			}):Play()
		else
			if page.Visible then
				TweenService:Create(page, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quart), {
					Position = UDim2.fromScale(-1, 0)
				}):Play()
				task.wait(THEME.Motion.Quick)
				page.Visible = false
			end
		end
	end
end

-- Connect tab buttons
for id, tab in pairs(tabs) do
	track(tab.button.MouseButton1Click:Connect(function()
		switchTab(id)
	end))
end

-- ========================================
-- TOGGLE BUTTON (Bottom corner)
-- ========================================

local toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "ToggleButton"
toggleBtn.Size = UDim2.fromOffset(80, 80) -- Fixed size
toggleBtn.Position = UDim2.new(1, -100, 1, -100)
toggleBtn.AnchorPoint = Vector2.new(1, 1)
toggleBtn.BackgroundColor3 = THEME.Palette.Accent
toggleBtn.Text = "üíñ"
toggleBtn.TextSize = 36
toggleBtn.Font = THEME.Typography.Button
toggleBtn.TextColor3 = THEME.Palette.White
toggleBtn.AutoButtonColor = false
toggleBtn.ZIndex = 15
toggleBtn.Parent = screenGui

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = THEME.CornerRadius.Round
toggleCorner.Parent = toggleBtn

local toggleStroke = Instance.new("UIStroke")
toggleStroke.Thickness = THEME.Strokes.ButtonThickness
toggleStroke.Color = THEME.Palette.AccentDark
toggleStroke.Parent = toggleBtn

local toggleScale = Instance.new("UIScale")
toggleScale.Scale = 1
toggleScale.Parent = toggleBtn

-- Floating animation for toggle button
spawn(function()
	while true do
		TweenService:Create(toggleBtn, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
			Position = UDim2.new(1, -100, 1, -105)
		}):Play()
		wait(2)
		TweenService:Create(toggleBtn, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
			Position = UDim2.new(1, -100, 1, -95)
		}):Play()
		wait(2)
	end
end)

-- ========================================
-- SHOP OPEN/CLOSE ANIMATIONS
-- ========================================

local function showShop()
	overlay.Visible = true
	mainFrame.Visible = true
	
	-- Fade in overlay
	TweenService:Create(overlay, TweenInfo.new(THEME.Motion.Transition), {
		BackgroundTransparency = 0.3
	}):Play()
	
	-- Scale in main frame with bounce
	local scale = mainFrame:FindFirstChild("UIScale") or Instance.new("UIScale")
	scale.Scale = 0.8
	scale.Parent = mainFrame
	
	TweenService:Create(scale, TweenInfo.new(THEME.Motion.Transition, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
		Scale = 1
	}):Play()
	
	-- Default to currency tab
	switchTab("currency")
end

local function hideShop()
	-- Fade out overlay
	TweenService:Create(overlay, TweenInfo.new(THEME.Motion.Quick), {
		BackgroundTransparency = 1
	}):Play()
	
	-- Scale out main frame
	local scale = mainFrame:FindFirstChild("UIScale")
	if scale then
		TweenService:Create(scale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
			Scale = 0.9
		}):Play()
	end
	
	task.wait(THEME.Motion.Quick)
	overlay.Visible = false
	mainFrame.Visible = false
end

-- Connect buttons
track(toggleBtn.MouseButton1Click:Connect(showShop))
track(closeBtn.MouseButton1Click:Connect(hideShop))
track(overlay.MouseButton1Click:Connect(hideShop))

-- Toggle button interactions
track(toggleBtn.MouseEnter:Connect(function()
	TweenService:Create(toggleScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
		Scale = 1.1
	}):Play()
end))

track(toggleBtn.MouseLeave:Connect(function()
	TweenService:Create(toggleScale, TweenInfo.new(THEME.Motion.Quick, Enum.EasingStyle.Quad), {
		Scale = 1
	}):Play()
end))

-- ========================================
-- CLEANUP ON DESTROY
-- ========================================

screenGui.Destroying:Connect(function()
	for _, conn in ipairs(connections) do
		pcall(function()
			conn:Disconnect()
		end)
	end
end)

-- ========================================
-- AUDIO SYSTEM PLACEHOLDER (Section 3.4)
-- ========================================

-- TODO: Implement kawaii sound effects
-- local sounds = {
--     hover = "rbxassetid://XXX", -- Soft blip
--     click = "rbxassetid://XXX", -- Happy bloop
--     purchase = "rbxassetid://XXX", -- Celebration chime
--     error = "rbxassetid://XXX", -- Gentle error
-- }

-- ========================================
-- PARTICLE SYSTEM PLACEHOLDER (Section 3.5)
-- ========================================

-- TODO: Implement UI particle effects for purchases
-- This would require a custom 2D particle module

print("‚ú® Kawaii Money Shop Enhanced loaded successfully!")
print("Current theme:", CURRENT_THEME)